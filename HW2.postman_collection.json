{
	"info": {
		"_postman_id": "3f54b558-b778-4d0e-b1fc-a719d5f0b3fd",
		"name": "HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверить статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//Спарсить request.\r",
							"var ky = request.data;\r",
							"//Проверить Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(\"Simon\")\r",
							"}); \r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"25\")\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(500)\r",
							"});\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name s request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(ky.name)\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check age s request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(ky.age)\r",
							"    });\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check salary s request\", function(){\r",
							"    pm.expect(jsonData.salary).to.eql(1*ky.salary)\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"console.log(jsonData.family.u_salary_1_5_year);\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_year\", function(){\r",
							"          pm.expect(jsonData.family.u_salary_1_5_year).to.eql(2000)\r",
							"   });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Simon",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Simon",
							"disabled": true
						},
						{
							"key": "age",
							"value": "25",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "500",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status cade is 200\", function (){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"//Спарсить response body в json\r",
							"var by = pm.response.json();\r",
							"//Спарсить request\r",
							"var ty = pm.request.url.query.toObject();\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name s request\", function (){\r",
							"    pm.expect(by.name).to.eql(ty.name)\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age s request\", function(){\r",
							"    pm.expect(by.age).to.eql(ty.age)\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary s request\", function(){\r",
							"    pm.expect(by.salary).to.eql(+ty.salary)\r",
							"});\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(ty.age);\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"dog have name\", function(){\r",
							"    pm.expect(by.family.pets.dog).to.have.property(\"name\")\r",
							"});\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog have age\", function() {\r",
							"    pm.expect(by.family.pets.dog).to.have.property(\"age\")\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog is Luky\", function(){\r",
							"    pm.expect(by.family.pets.dog.name).to.eql(\"Luky\")\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog is 4 yo\", function(){\r",
							"    pm.expect(by.family.pets.dog.age).to.eql(4)\r",
							"  });  "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_3?name=Simon&age=25&salary=500",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Simon"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"var by = pm.response.json();\r",
							"//Спарсить request\r",
							"var ty = pm.request.url.query.toObject();\r",
							"\r",
							"console.log(by.name);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name s request\", function(){\r",
							"    pm.expect(by.name).to.eql(ty.name)\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age s request\", function() {\r",
							"    pm.expect(by.age).to.eql(+ty.age)\r",
							"});\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(\"request_salary = \" + ty.salary);\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(\"response_salary = \" + ty.salary);\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"//var salary_0 = ty.salary[0];\r",
							"console.log(\"salary [0] = \" + by.salary[0]);\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary [1] = \" + by.salary[1]);\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"salary [2] = \" + by.salary[2]);\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"salary[0] s request\", function(){\r",
							"    pm.expect(+ty.salary).to.have.eql(by.salary[0])\r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"salary[1] s request\", function(){\r",
							"    pm.expect(2*ty.salary).to.have.eql(+by.salary[1])\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"salary[2] s request\", function(){\r",
							"    pm.expect(3*ty.salary).to.have.eql(+by.salary[2])\r",
							"});\r",
							"//Создать в окружении переменную name\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", by.name)\r",
							"//Создать в окружении переменную age\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", by.age)\r",
							"//Создать в окружении переменную salary\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", by.salary[0])\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"var count = 1\r",
							"var sal = by.salary\r",
							"for (i of sal){\r",
							"    console.log(\"numb \", count, i)\r",
							"    count ++\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/object_info_4?name=Simon&age=25&salary=500",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Simon"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"//Вставить параметр age из окружения в age\r",
							"//Вставить параметр name из окружения в name\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"var by = pm.response.json();\r",
							"//Спарсить request.\r",
							"var ty = request.data;\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check response have to start_qa_salary\", function() {\r",
							"    pm.expect(by).to.have.property(\"start_qa_salary\")\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check response have to qa_salary_after_6_months\", function(){\r",
							"    pm.expect(by).to.have.property(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check response have to qa_salary_after_12_months\", function(){\r",
							"    pm.expect(by).to.have.property(\"qa_salary_after_12_months\")\r",
							"    });\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check response have to qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(by).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"    });\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check response have to qa_salary_after_3.5_years\", function(){\r",
							"    pm.expect(by).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"    });\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check response have to person\", function(){\r",
							"    pm.expect(by).to.have.property(\"person\")\r",
							"    });\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary\", function(){\r",
							"    pm.expect(+ty.salary).to.have.eql(by.start_qa_salary)\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months\", function(){\r",
							"    pm.expect(2*ty.salary).to.have.eql(by.qa_salary_after_6_months)\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months\", function(){\r",
							"    pm.expect(2.7*ty.salary).to.have.eql(by.qa_salary_after_12_months)\r",
							"});\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(3.3*ty.salary).to.have.eql(by[\"qa_salary_after_1.5_year\"])\r",
							"   });\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_years\", function(){\r",
							"    pm.expect(3.8*ty.salary).to.have.eql(by[\"qa_salary_after_3.5_years\"])\r",
							"});\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check u_name\", function() {\r",
							"    pm.expect(+ty.salary).to.have.eql(by.person.u_name[1])\r",
							"});\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age\", function() {\r",
							"    pm.expect(+ty.age).to.have.eql(by.person.u_age)\r",
							"});\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years\", function(){\r",
							"    pm.expect(4.2*ty.salary).to.have.eql(by.person.u_salary_5_years)\r",
							"});\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"   var count = 1\r",
							"var per = by.person.u_name \r",
							"for (i of per){\r",
							"    console.log(\"numb \", count, i)\r",
							"    count ++\r",
							"    };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5005/user_info_2",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "salary",
			"value": ""
		}
	]
}